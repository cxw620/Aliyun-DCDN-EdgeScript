# safety_rules_include_whitelist
# Version: v5.2.production
# add_rsp_header('X-ES-Version', 'v5.2.production')
# Updated: 2022-07-30 18:15:00
# Intro.: Optimized Whitelist Func, Block Func
# Known Issues: None

# ----------------------------VARIABLE-----------------------------
# Whitelisted IP
allow_ip = []
# Fake Source IP, uncomment line 12, 82-85 if you need such func
# fake_ip = ''
# --------------------------VARIABLE END---------------------------

# -------------------NO EDIT FOLLOWING CONTENT---------------------
## -----------------------------FUNC-------------------------------
# Block Func
def block_details() {
    # For Debug Only. If you need to debug please change line 71 "block_easy()" to "block_details()"
    add_rsp_header('X-Client-Country', client_country())
    add_rsp_header('X-Client-IP', client_addr())
    add_rsp_header('X-Client-ISP', client_isp())
    # Block some IDC's IP
    c_isp = tostring(client_isp())
    isp_ct = '100017'
    isp_cm = '100025'
    isp_cu = '100026'
    if not(or(eq(isp_cm,c_isp), eq(isp_ct,c_isp), eq(isp_cu,c_isp))) {
        add_rsp_header('X-Client-Block', 'Blocked Client ISP')
        exit(401)
    } else {
        # Intercept some proxy connections
        if req_header('x_forwarded_for') {
            add_rsp_header('X-Client-Block', 'Block Proxied Request')
            exit(401)
        } else {
            # Block None CN ip
            if ne(client_country(),'CN') {
                add_rsp_header('X-Client-Block', 'Blocked Client Country')
                exit(401)
            }
        }
    }
}
def block_easy() {
    # Block some IDC's IP
    c_isp = tostring(client_isp())
    if not(or(eq('100025',c_isp), eq('100026',c_isp), eq('100017',c_isp))) {
        exit(401)
    } else {
        # Intercept some proxy connections
        if req_header('x_forwarded_for') {
            exit(401)
        } else {
            # Block None CN ip
            if ne(client_country(),'CN') {
                exit(401)
            }
        }
    }
}
## ---------------------------FUNC END-----------------------------
## -----------------------------FUNC-------------------------------
# Main Whitelist Func
w = false
c_ip = tostring(client_addr())
def determine_wlt(k, v, u) {
    # Determine whether it's been already whitelist
    if w {
        # if debug_mode please use block_details()
        block_easy()
        return false
    } else {
        w = eq(v, c_ip)
    }
}
if allow_ip {
    foreach(allow_ip, determine_wlt, [])
}
## ---------------------------FUNC END-----------------------------
## -----------------------------FUNC-------------------------------
# Fake IP Func
# if fake_ip {
#     add_req_header('x_forwarded_for', fake_ip)
# }
## ---------------------------FUNC END-----------------------------
